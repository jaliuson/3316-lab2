{"version":3,"sources":["index.js"],"names":["Slot","props","onClick","style","backgroundColor","value","width","height","margin","border","borderRadius","Board","state","slots","Array","fill","redTurn","i","this","slice","calculateWinner","setState","handleClick","status","winner","padding","marginTop","fontSize","color","className","renderSlot","React","Component","console","log","j","ReactDOM","render","document","getElementById"],"mappings":"6NAIA,SAASA,EAAKC,GACV,OACE,wBAAQC,QAASD,EAAMC,QAASC,MAAO,CAACC,gBAAiBH,EAAMI,MAAOC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,MAAQC,OAAQ,MAAOC,aAAc,W,IAKhJC,E,kDACJ,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDW,MAAQ,CACXC,MAAOC,MAAM,IAAIC,KAAK,SACtBC,SAAS,GAJM,E,+CAQnB,SAAYC,GACV,IAAMJ,EAAQK,KAAKN,MAAMC,MAAMM,QAE3BC,EAAgBP,IAAsB,SAAZA,EAAMI,KAIpCJ,EAAMI,GAAKC,KAAKN,MAAMI,QAAU,MAAQ,SACxCE,KAAKG,SAAS,CACZR,MAAOA,EACPG,SAAUE,KAAKN,MAAMI,a,wBAIzB,SAAWC,GAAI,IAAD,OACZ,OACE,cAACjB,EAAD,CACEK,MAAOa,KAAKN,MAAMC,MAAMI,GACxBf,QAAS,kBAAM,EAAKoB,YAAYL,Q,oBAKtC,WACE,IACIM,EADEC,EAASJ,EAAgBF,KAAKN,MAAMC,OAY1C,OATEU,EADW,OAAVC,EACQ,4CAEFA,EACE,WAAaA,EAGb,iBAAmBN,KAAKN,MAAMI,QAAU,MAAQ,UAIzD,sBAAKb,MAAO,CAACC,gBAAiB,UAAWE,MAAO,MAAQmB,QAAS,OAAQjB,OAAQ,OAAQkB,UAAW,QAAShB,aAAc,QAA3H,UAEE,qBAAKP,MAAO,CAACwB,SAAU,OAAQC,MAAO,QAASnB,OAAQ,kBAAmBD,OAAQ,QAAlF,SAA4Fe,IAE5F,sBAAKM,UAAU,YAAf,UACGX,KAAKY,WAAW,GAChBZ,KAAKY,WAAW,GAChBZ,KAAKY,WAAW,GAChBZ,KAAKY,WAAW,GAChBZ,KAAKY,WAAW,GAChBZ,KAAKY,WAAW,GAChBZ,KAAKY,WAAW,MAEnB,sBAAKD,UAAU,YAAf,UACGX,KAAKY,WAAW,GAChBZ,KAAKY,WAAW,GAChBZ,KAAKY,WAAW,GAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,OAEnB,sBAAKD,UAAU,YAAf,UACGX,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,OAEnB,sBAAKD,UAAU,YAAf,UACGX,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,OAEnB,sBAAKD,UAAU,YAAf,UACGX,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,OAEnB,sBAAKD,UAAU,YAAf,UACGX,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,IAChBZ,KAAKY,WAAW,c,GAtGPC,IAAMC,WAmH1B,SAASZ,EAAgBP,GACvBoB,QAAQC,IAAIrB,GACZ,IAAI,IAAII,EAAE,EAAIA,EAAE,GAAKA,GAAG,EACtB,IAAI,IAAIkB,EAAElB,EAAIkB,EAAGlB,EAAE,EAAKkB,IACtB,GAAe,SAAZtB,EAAMsB,IAAiBtB,EAAMsB,IAAMtB,EAAMsB,EAAE,IAAMtB,EAAMsB,IAAMtB,EAAMsB,EAAE,KAAOtB,EAAMsB,IAAMtB,EAAMsB,EAAE,IACjG,OAAOtB,EAAMsB,GAKnB,IAAI,IAAIlB,EAAE,EAAIA,EAAE,GAAKA,GAAG,EACtB,IAAI,IAAIkB,EAAElB,EAAIkB,EAAGlB,EAAE,EAAKkB,IACtB,GAAe,SAAZtB,EAAMsB,IAAiBtB,EAAMsB,IAAMtB,EAAMsB,EAAE,IAAMtB,EAAMsB,IAAMtB,EAAMsB,EAAE,IAAMtB,EAAMsB,IAAMtB,EAAMsB,EAAE,GAChG,OAAOtB,EAAMsB,GAKnB,IAAI,IAAIlB,EAAE,EAAIA,EAAE,GAAKA,IACnB,GAAe,OAAZJ,EAAMI,IAA2B,UAAZJ,EAAMI,GAC5B,OAAO,KAIX,MAAO,MA7BTmB,IAASC,OACP,cAAC1B,EAAD,IACA2B,SAASC,eAAe,W","file":"static/js/main.4b12d463.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\n\r\nfunction Slot(props) {\r\n    return (\r\n      <button onClick={props.onClick} style={{backgroundColor: props.value, width: \"60px\", height: \"60px\", margin: \"3px\" , border: \"0px\", borderRadius: \"100px\"}}></button>\r\n      //return button\r\n      );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        slots: Array(42).fill(\"white\"), //create and fill the slots array with all board slots and fill with white (empty) to begin\r\n        redTurn: true, //begin on reds turn, if flase, it will be yellow's\r\n      };\r\n    }\r\n  \r\n    handleClick(i) { //click handler that will be invoked for any slot\r\n      const slots = this.state.slots.slice(); //creates acopy of the current state (slots)\r\n\r\n      if (calculateWinner(slots) || slots[i] != \"white\") { //disables occupied slots or the entire board if there's a winner\r\n        return;    \r\n      }\r\n\r\n      slots[i] = this.state.redTurn ? 'red' : 'yellow'; //if reached, play is valid and next chip is flipped\r\n      this.setState({\r\n        slots: slots,\r\n        redTurn: !this.state.redTurn, //changes next chip colour\r\n      });\r\n    }\r\n  \r\n    renderSlot(i) {\r\n      return (\r\n        <Slot\r\n          value={this.state.slots[i]} //renders current state/colour of the slot\r\n          onClick={() => this.handleClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      const winner = calculateWinner(this.state.slots); //holds value of the winning colour if there is one\r\n      let status;\r\n      if(winner == \"tie\"){ //displays for a tied game (board full with no winner)\r\n        status = 'This game is a tie, refresh to play agian'\r\n      }\r\n      else if (winner) { //displays winning color\r\n        status = 'Winner: ' + winner;\r\n      } \r\n      else { //displays whose turn it is for normal play\r\n        status = 'Next player: ' + (this.state.redTurn ? 'red' : 'yellow');\r\n      }\r\n  \r\n      return (\r\n        <div style={{backgroundColor: \"#2092bb\", width: \"60%\" , padding: \"30px\", margin: \"auto\", marginTop: \"100px\", borderRadius: \"12px\"}}>\r\n          {/* display status bar for player turn or end game statement*/}\r\n          <div style={{fontSize: \"40px\", color: \"white\", border: \"2px solid white\", margin: \"10px\"}}>{status}</div> \r\n          {/* return redered slots in their respective rows, assign each slot an address for refrence*/}\r\n          <div className=\"board-row\">\r\n            {this.renderSlot(0)}\r\n            {this.renderSlot(1)}\r\n            {this.renderSlot(2)}\r\n            {this.renderSlot(3)}\r\n            {this.renderSlot(4)}\r\n            {this.renderSlot(5)}\r\n            {this.renderSlot(6)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSlot(7)}\r\n            {this.renderSlot(8)}\r\n            {this.renderSlot(9)}\r\n            {this.renderSlot(10)}\r\n            {this.renderSlot(11)}\r\n            {this.renderSlot(12)}\r\n            {this.renderSlot(13)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSlot(14)}\r\n            {this.renderSlot(15)}\r\n            {this.renderSlot(16)}\r\n            {this.renderSlot(17)}\r\n            {this.renderSlot(18)}\r\n            {this.renderSlot(19)}\r\n            {this.renderSlot(20)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSlot(21)}\r\n            {this.renderSlot(22)}\r\n            {this.renderSlot(23)}\r\n            {this.renderSlot(24)}\r\n            {this.renderSlot(25)}\r\n            {this.renderSlot(26)}\r\n            {this.renderSlot(27)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSlot(28)}\r\n            {this.renderSlot(29)}\r\n            {this.renderSlot(30)}\r\n            {this.renderSlot(31)}\r\n            {this.renderSlot(32)}\r\n            {this.renderSlot(33)}\r\n            {this.renderSlot(34)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSlot(35)}\r\n            {this.renderSlot(36)}\r\n            {this.renderSlot(37)}\r\n            {this.renderSlot(38)}\r\n            {this.renderSlot(39)}\r\n            {this.renderSlot(40)}\r\n            {this.renderSlot(41)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  //render a game board for the react page\r\n  ReactDOM.render(\r\n    <Board />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  function calculateWinner(slots) { //searches for a winner\r\n    console.log(slots)\r\n    for(let i=0 ; i<21 ; i+=7){ //searches for a win by vertical connection\r\n      for(let j=i ; j<(i+7) ; j++){\r\n        if(slots[j] != \"white\" && slots[j] == slots[j+7] && slots[j] == slots[j+14] && slots[j] == slots[j+21]){\r\n          return slots[j];\r\n        }\r\n      }\r\n    }\r\n\r\n    for(let i=0 ; i<41 ; i+=7){ //searches for a win by horizontal connection\r\n      for(let j=i ; j<(i+4) ; j++){\r\n        if(slots[j] != \"white\" && slots[j] == slots[j+1] && slots[j] == slots[j+2] && slots[j] == slots[j+3]){\r\n          return slots[j];\r\n        }\r\n      }\r\n    }\r\n    \r\n    for(let i=0 ; i<42 ; i++){ //checks for empty squares \r\n      if(slots[i] != \"red\" && slots[i] != \"yellow\"){\r\n        return null\r\n      }\r\n    }\r\n\r\n    return \"tie\"; //returns a tie if all square have been filled\r\n  }"],"sourceRoot":""}